{"version":3,"sources":["result.js","App.js","reportWebVitals.js","index.js"],"names":["Results","props","resultvalue","resultdata","isLoading","Fragment","className","map","result","index","paymentvalue","ppvalue","intvalue","balanceamount","App","state","Amount","rateofinterest","period","amountchange","bind","interestchange","periodchange","calculate","clear","event","this","setState","target","value","preventDefault","amount","rate","noofmonths","i","Paymentvalue","Math","pow","PPValue","Intvalue","Balanceamount","round","prevState","onSubmit","type","onChange","required","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.120c1b98.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Results(props) {\r\n    const {resultdata,isLoading}  = props.resultvalue;\r\n   \r\n    return( \r\n        <React.Fragment>\r\n     {isLoading ? (\r\n       <div>\r\n           <table className=\"table table-striped table-hover\" >\r\n               <thead>\r\n                   <tr>\r\n                <th >Months </th>\r\n                <th >payment value</th>\r\n                <th >principal amount</th>\r\n                <th >Interest Amount</th>\r\n                <th>Loan Balance</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n           { resultdata && resultdata.map((result, index) => (\r\n            \r\n          <tr key={index}> \r\n            <td>{index===0? '' : index}</td>\r\n             \r\n             <td>{result.paymentvalue}</td>\r\n             <td>{result.ppvalue}</td>\r\n             <td>{result.intvalue}</td>\r\n             <td>{result.balanceamount}</td>\r\n          </tr>\r\n       \r\n          ))}\r\n           </tbody>\r\n           </table>\r\n    \r\n       </div>   \r\n        \r\n    \r\n      // If there is a delay in data, let's let the user know it's loading\r\n      ) : (\r\n        <p className=\"text-center\">...</p>\r\n      )}\r\n       </React.Fragment>     \r\n     )\r\n\r\n           }\r\nexport default Results;\r\n","import './App.css';\n\nimport React, { Component } from 'react'\nimport Results from \"./result\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Amount : \" \",\n      rateofinterest: \"\",\n      period:\"\",\n      isLoading: false,\n      resultdata:[\n        {\n         \n        }\n      ]\n      \n    };\n    this.amountchange = this.amountchange.bind(this);\n    this.interestchange = this.interestchange.bind(this);\n    this.periodchange = this.periodchange.bind(this);\n    this.calculate = this.calculate.bind(this);\n    this.clear = this.clear.bind(this);\n  }\n  amountchange(event) {\n    this.setState({Amount: event.target.value});\n  }\n  interestchange(event) {\n    this.setState({rateofinterest: event.target.value});\n  }\n  periodchange(event) {\n    this.setState({period: event.target.value});\n  }\n  clear(){\n      this.setState({\n        Amount : \" \",\n        rateofinterest: \"\",\n        period:\"\",\n        isLoading: false,\n        resultdata:[\n          {\n           \n          }\n        ]\n        \n      })\n  }\n  calculate(event) {\n    event.preventDefault();\n    this.setState({ isLoading: false,\n      resultdata:[\n        {\n         \n        }\n      ]\n      \n    })\n    let amount = this.state.Amount;\n    let rate = (this.state.rateofinterest) / 1200;\n    let noofmonths = this.state.period;\n    for (let i = 1; i <= noofmonths; i++)\n    {\n      let Paymentvalue = ((rate * amount) * Math.pow((1 + rate), noofmonths)) / (Math.pow((1 + rate), noofmonths) - 1);\n      let PPValue = Paymentvalue * Math.pow((1 + rate), (i-1-noofmonths));\n      let Intvalue = Paymentvalue-PPValue;\n      let Balanceamount = (Intvalue/rate)-PPValue;\n      let result={\n           paymentvalue : Math.round( Paymentvalue*100)/100,\n           ppvalue : Math.round(PPValue*100) /100,\n           intvalue :Math.round(Intvalue*100)/100,\n           balanceamount :Math.round(Balanceamount*100)/100\n      }          \n      this.setState(prevState => ({\n        resultdata: [...prevState.resultdata, result]\n      }))\n     \n      this.setState({isLoading: true});\n\n  }\n  \n\n}\n  render() {\n    return (\n      <div className=\"App\">\n      <h1> Loan repayment Calculations</h1>\n      <form className=\"m-3 text-center \" onSubmit={this.calculate}>\n        <div>\n            <label className=\"pr-5\">Amount</label>\n            <input  type=\"number\" value={this.state.Amount} onChange={this.amountchange} required></input>\n        </div>\n        <div>\n            <label className=\"pr-5\">Interest</label>\n            <input  type=\"number\" value={this.state.rateofinterest} onChange={this.interestchange} required></input>\n        </div>\n        <div>\n            <label className=\"p-1\">Period(Months)</label>\n            <input  type=\"number\" value={this.state.period} onChange={this.periodchange} required></input>\n        </div>\n        <button type=\"submit\" className=\"btn btn-success\">Calculate</button>\n        <button type=\"submit\" className=\"btn btn-danger m-3\" onClick={this.clear}>Clear</button>\n      </form>\n      <Results resultvalue={this.state}/>\n    </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}